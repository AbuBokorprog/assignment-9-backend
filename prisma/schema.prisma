// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// All Models
model User {
  id                    String @id @default(uuid())
  email                 String   @unique
  password              String
  role                  UserRole @default(CUSTOMER)
  status                UserStatus @default(ACTIVE)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  admin                 Admin?
  vendor                Vendor?
  customer              Customer?
  carts                 Cart[]
  orders                Order[]
  following             Follower[]
  reviews               Review[]
  comparison            Comparison[]
  recentProducts        RecentProduct[]
  wishlists             Wishlist[]
  
  @@map("users")
}

model Admin {
  id                    String @id @default(uuid())
  name                  String
  email                 String @unique
  profilePhoto          String?
  contactNumber         String
  isDeleted             Boolean @default(false)
  user                  User @relation(fields: [email], references: [email])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

@@map("admins")
}

model Vendor {
  id                    String @id @default(uuid())
  name                  String
  email                 String @unique
  profilePhoto          String?
  contactNumber         String
  isDeleted             Boolean @default(false)
  user                  User @relation(fields: [email], references: [email])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  shop                  Shop?
  products              Product[]
  carts                 Cart[]
@@map("vendors")
}

model Customer {
  id                    String @id @default(uuid())
  name                  String
  email                 String @unique
  profilePhoto          String?
  contactNumber         String
  isDeleted             Boolean @default(false)
  user                  User @relation(fields: [email], references: [email])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

@@map("customers")
}

model Shop {
  id                    String   @id @default(uuid())
  shopName              String @unique
  shopLogo              String
  shopCover             String
  description           String?
  address               String
  registrationNumber    String
  categoryId            String
  isActive              ActiveStatus @default(PENDING)
  category              Category @relation(fields: [categoryId], references: [id])
  vendorId              String   @unique
  vendor                Vendor   @relation(fields: [vendorId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  products              Product[]
  followers             Follower[]
  reviews               Review[]

  @@map("shops")
}

model Category {
  id                    String @id @default(uuid())
  name                  String @unique
  image	                String
  description           String?
  isActive              ActiveStatus @default(APPROVED)
  products              Product[]
  shop                  Shop[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("categories")
}

model SizeOption {
  id                    String   @id @default(uuid())
  productId             String
  product               Product  @relation(fields: [productId], references: [id])
  size                  String
  stock                 Int
}

model ColorOption {
  id                    String   @id @default(uuid())
  productId             String
  product               Product  @relation(fields: [productId], references: [id])
  color                 String
  code                  String
  stock                 Int
}


model Product {
  id                    String          @id @default(uuid())
  name                  String
  description           String
  images                String[]
  inventory             Int
  regular_price         Float
  discount_price        Float?
  sizes                 SizeOption[]
  colors                ColorOption[]
  productStatus         ProductStatus @default(REGULAR)
  stockStatus           StockStatus @default(IN_STOCK)
  isActive              ActiveStatus @default(PENDING)
  category              Category         @relation(fields: [categoryId], references: [id])
  categoryId            String
  vendor                Vendor           @relation(fields: [vendorId], references: [id])
  vendorId              String
  shopId                String
  shop                  Shop             @relation(fields: [shopId], references: [id])
  carts                 Cart[]
  orders                ProductOrder[]   // Many-to-Many relationship via ProductOrder
  reviews               Review[]
  comparison            Comparison[]
  recentProducts        RecentProduct[]
  wishlist              Wishlist[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  @@map("products")
}

model Cart {
  id                    String          @id @default(uuid())
  customerId            String
  customer              User @relation(fields: [customerId], references: [id])
  productId             String
  product               Product @relation(fields: [productId], references: [id])
  vendorId              String
  vendor                Vendor @relation(fields: [vendorId], references: [id])
  color                 String?
  size                  String?
  qty                   Int
  price                 Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("carts")
}

model ProductOrder {
  id                    String   @id @default(uuid())
  orderId               String
  order                 Order    @relation(fields: [orderId], references: [id])
  productId             String
  product               Product  @relation(fields: [productId], references: [id])
  quantity              Int      // Quantity of products in the order
  price                 Float
  size                  String?
  color                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// model ShippingInfo {
//   id          String   @id @default(uuid())
//   recipient   String   // Name of the person receiving the order
//   addressLine String   // Main address line
//   city        String   // City
//   state       String?  // State/Province (optional)
//   postalCode  String   // Postal/ZIP code
//   // country     String   // Country
//   phone       String?  // Contact number for delivery (optional)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

model Order {
  id                  String          @id @default(uuid())
  customerId          String
  customer            User            @relation(fields: [customerId], references: [id])
  products            ProductOrder[]  // Relationship with join table
  totalAmount         Float
  status              OrderStatus     @default(PENDING)
  fullName            String
  phoneNumber         String
  email               String
  deliveryAddress     String
  deliveryArea        String
  deliveryCharge      Int
  city                String
  quantity            Int
  postalCode          Int
  paymentType         PaymentType
  payment             Payment?
  // shippingInfoId   String?
  // shippingInfo   ShippingInfo?   @relation(fields: [shippingInfoId], references: [id])
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model Payment {
  id                  String @id @default(uuid())
  orderId             String @unique
  order               Order @relation(fields: [orderId], references: [id])
  amount              Float
  paymentMethod       String
  status              PaymentStatus @default(UNPAID)
  transactionId       String?
  paidAt              DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("payments")
}
model Follower {
  id                  String @id @default(uuid())
  customerId          String
  shopId              String
  customer            User @relation(fields: [customerId], references: [id])
  shop                Shop @relation(fields: [shopId], references: [id])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("followers")
}

model Review {
  id                  String @id @default(uuid())
  customerId          String
  customer            User @relation(fields: [customerId], references: [id])
  productId           String
  product             Product @relation(fields: [productId], references: [id])
  shopId              String
  shop                Shop @relation(fields: [shopId], references: [id])
  rating              Int @default(5)
  comment             String?
  reviewStatus        ActiveStatus @default(PENDING)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Coupon {
  id                  String      @id @default(uuid())
  name                String
  code                String      @unique
  discount            Float
  expiryDate          DateTime
  isActive            Boolean     @default(true)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Comparison{
  id                  String @id @default(uuid())
  userId              String
  user                User @relation(fields: [userId], references: [id])
  productId           String
  product             Product @relation(fields: [productId], references: [id])
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@map("comparisons")
}
model Wishlist{
  id                  String @id @default(uuid())
  userId              String
  user                User @relation(fields: [userId], references: [id])
  productId           String
  product             Product @relation(fields: [productId], references: [id])
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@map("wishlists")
}

model RecentProduct{
  id                  String @id @default(uuid())
  userId              String
  user                User @relation(fields: [userId], references: [id])
  productId           String
  product             Product @relation(fields: [productId], references: [id])
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@map("recentProducts")
}


// enums
enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  SUSPEND
  DELETED
}

enum ProductStatus {
  REGULAR
  FLASH_SALE
  FEATURED
  NEW
  HOT
  DISCOUNT
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}

enum ActiveStatus {
  PENDING
  APPROVED
  REJECT
  DELETE
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  SHIPPED
  CANCELLED
}

enum PaymentStatus {
  PAID
  UNPAID
  FAILED
  REFUNDED
}

enum PaymentType {
  COD
  ADV
}